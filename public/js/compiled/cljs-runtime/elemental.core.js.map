{"version":3,"sources":["elemental/core.cljs"],"mappings":"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","names":["fps","elemental.core/update-interval","elemental.core/width","elemental.core/height","elemental.core/debug?","elemental.core/initial-db","js/elemental","js/elemental.core","js/elemental.core.db","elemental.core/db","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","elemental.core/view","map__26462","cljs.core/deref","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","player","db","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","p__26466","map__26467","elemental.core/update-state","pressed-keys","d","p1__26464#","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","G__26469","G__26470","p1__26465#","G__26471","G__26472","elemental.core/game-loop","js/window.requestAnimationFrame","current-time","js/Date","delta","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","_","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","code->key","elemental.core/handle-key","edit-fn","event","kc","temp__5735__auto__","k","js/console.log","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","elemental.core/kd-hook","e","cljs.core/conj","elemental.core/ku-hook","cljs.core/disj","elemental.core/hook-pressed-keys!","js/window.addEventListener","elemental.core/unhook-pressed-keys!","js/window.removeEventListener","elemental.core/init","G__26473","G__26474","reagent.core/render-component","js/document","elemental.core/stop"],"sourcesContent":["(ns elemental.core\n  (:require [reagent.core :as reagent :refer [atom]]))\n\n(let [fps 60]\n  (def update-interval (/ 1000 fps)))\n\n(def width 800)\n(def height 600)\n(def debug? false)\n\n(def initial-db {:pressed-keys #{}\n                 :loop {:time 0 :delta 0}\n                 :player {:x 100 :y 100}})\n\n(defonce db (atom initial-db))\n\n(defn view []\n  (let [{:keys [player] :as db} @db]\n    [:div\n     [:pre (pr-str db)]\n     [:svg {:style {:width width :height height :background-color \"#0d1b2a\"}\n            :view-box (str \"0 0\" width \" \" height)}\n      [:circle {:fill \"#415a77\"\n                :r 10\n                :cx (:x player)\n                :cy (:y player)}]]]))\n\n(defn update-state\n  \"Returns new version of app-db\n  d represents how long it has been since the previous update.\"\n  [{:keys [pressed-keys] :as db} d]\n  (-> db\n      (update-in [:player :x]\n                 #(cond (pressed-keys :right) (+ % d)\n                        (pressed-keys :left)  (- % d)\n                        :else %))\n      (update-in [:player :y]\n                 #(cond (pressed-keys :up)   (- % d)\n                        (pressed-keys :down) (+ % d)\n                        :else %))))\n\n(comment\n  ;; Here you can try your update-state function from the repl:\n\n  (update-state initial-db 0)\n  ;; => {:pressed-keys #{}, :loop {:time 0, :delta 0}, :player {:x 100, :y 100}}\n\n  (:player (update-state (assoc initial-db :pressed-keys #{:right}) 10))\n  ;; => {:x 103, :y 100}\n\n  (:player (update-state (assoc initial-db :pressed-keys #{:right :up}) 100))\n  ;; => {:x 130, :y 70}\n  )\n\n\n\n(defn game-loop []\n  (js/window.requestAnimationFrame game-loop)\n  (let [current-time (.getTime (js/Date.))\n        delta (- current-time (get-in @db [:loop :time]))\n        _ (swap! db assoc-in [:loop :delta] delta)]\n    (when (> delta update-interval)\n      (swap! db assoc-in [:loop :time] current-time)\n      ;; this handles the game's update logic\n      (swap! db update-state (/ delta update-interval)))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; hook keypresses\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(let [code->key {68 :right 65 :left 87 :up 83 :down ;; wasd\n                 39 :right 37 :left 38 :up 40 :down ;; arrow keys\n                 32 :space}]\n  (defn handle-key [edit-fn event]\n    (let [kc (.-keyCode event)]\n      (when-let [k (code->key kc)]\n        (.preventDefault event)\n        (js/console.log (pr-str k))\n        (swap! db update :pressed-keys edit-fn k)))))\n\n\n(def kd-hook (fn [e] (handle-key conj e)))\n(def ku-hook (fn [e] (handle-key disj e)))\n\n(defn hook-pressed-keys! []\n  (js/window.addEventListener \"keydown\" kd-hook false)\n  (js/window.addEventListener \"keyup\" ku-hook false))\n\n(defn unhook-pressed-keys! []\n  (js/window.removeEventListener \"keydown\" kd-hook false)\n  (js/window.removeEventListener \"keyup\" ku-hook false))\n\n(defn ^:export init []\n  ;; handle key presses\n  (hook-pressed-keys!)\n  ;; render the app\n  (reagent/render-component [view] (. js/document (getElementById \"app\")))\n  (game-loop))\n\n(defn stop [])\n"]}