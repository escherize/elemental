{"version":3,"sources":["reagent/ratom.cljs"],"mappings":"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","names":["js/reagent","js/reagent.ratom","js/reagent.ratom.debug","reagent.ratom/debug","js/reagent.ratom.generation","reagent.ratom/generation","js/reagent.ratom.-running","reagent.ratom/-running","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","reagent.ratom/reactive?","reagent.ratom/*ratom-context*","reagent.ratom/running","cljs.core/deref","reagent.ratom/arr-len","x","reagent.ratom/arr-eq","y","len","i","or__4185__auto__","reagent.ratom/in-context","obj","f","*ratom-context*-orig-val__36718","*ratom-context*-temp-val__36719","reagent.ratom/deref-capture","r","res","c","reagent.ratom/notify-deref-watcher!","derefed","temp__5739__auto__","reagent.ratom/check-watches","old","new","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/+","cljs.core/count","reagent.ratom/add-w","this","key","w","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","reagent.ratom/remove-w","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","reagent.ratom/notify-w","a","p1__36744#","p2__36745#","p3__36746#","cljs.core/reduce-kv","G__36748","k","reagent.ratom/pr-atom","writer","opts","s","cljs.core/-write","cljs.core/pr-writer","*ratom-context*-orig-val__36751","*ratom-context*-temp-val__36752","cljs.core/-deref","js/reagent.ratom.rea-queue","reagent.ratom/rea-queue","reagent.ratom/rea-enqueue","reagent.impl.batching/schedule","reagent.ratom/flush!","q","n__4666__auto__","reagent.impl.batching/ratom-flush","reagent.ratom/IReactiveAtom","cljs.core/PROTOCOL_SENTINEL","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","reagent.ratom/RAtom","reagent.ratom/->RAtom","state","meta","validator","watches","o","other","new-value","js/Error","old-value","cljs.core/-reset!","more","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","_","new-meta","goog/getUid","var_args","G__36774","reagent.ratom/atom","args-arr__4810__auto__","len__4789__auto__","i__4790__auto__","argseq__4811__auto__","cljs.core/IndexedSeq","p__36777","map__36778","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq36771","G__36772","cljs.core/first","cljs.core/next","self__4776__auto__","reagent.ratom/cache-key","reagent.ratom/cached-reaction","destroy","m","G__36783","G__36784","G__36785","reagent.ratom/make-reaction","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/dec","v","cljs.core/inc","reagent.ratom/Track","reagent.ratom/->Track","args","reaction","temp__5737__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/hash","reagent.ratom/make-track","reagent.ratom/make-track!","t","G__36800","G__36801","G__36802","args__4795__auto__","argseq__4796__auto__","reagent.ratom/track","seq36806","G__36807","cljs.core/ifn?","reagent.ratom/track!","seq36811","G__36812","reagent.ratom/RCursor","reagent.ratom/->RCursor","ratom","path","*ratom-context*-orig-val__36814","*ratom-context*-temp-val__36815","oldstate","newstate","cljs.core/native-satisfies?","cljs.core/IDeref","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core/reset!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","G__36823","G__36825","G__36826","G__36827","G__36828","G__36829","reagent.ratom/cursor","src","cljs.core/vector?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","reagent.ratom/with-let-destroy","reagent.ratom/with-let-values","cljs.core/array","x__4487__auto__","m__4488__auto__","reagent.ratom/dispose!","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","reagent.ratom/add-on-dispose!","reagent.ratom/IDisposable","reagent.ratom/run","reagent.ratom/IRunnable","reagent.ratom/handle-reaction-change","sender","p__36900","map__36901","reagent.ratom/Reaction","reagent.ratom/->Reaction","dirty?","nocache?","watching","auto-run","caught","was-empty","cljs.core/empty?","newval","cljs.core/fn?","oldval","G__36981","G__36997","G__36998","G__37002","G__37003","G__37004","*ratom-context*-orig-val__36867","*ratom-context*-temp-val__36868","cljs.core/set","seq__36876","cljs.core/seq","chunk__36877","count__36878","i__36879","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","cljs.core/-add-watch","seq__36894","chunk__36895","count__36896","i__36897","cljs.core/-remove-watch","e36899","e","check","on-set","on-dispose","no-cache","non-reactive","wg","seq__36919","chunk__36920","count__36921","i__36922","fexpr__36945","p__37118","map__37119","seq37100","G__37101","reagent.ratom/temp-reaction","reagent.ratom/run-in-reaction","run","reagent.ratom/check-derefs","ctx","reagent.ratom/Wrapper","reagent.ratom/->Wrapper","callback","changed","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","cljs.core/not","reagent.ratom/make-wrapper","value","callback-fn","reagent.impl.util/make-partial-fn"],"sourcesContent":["(ns reagent.ratom\n  (:refer-clojure :exclude [atom])\n  (:require-macros [reagent.ratom :refer [with-let]])\n  (:require [reagent.impl.util :as util]\n            [reagent.debug :refer-macros [dbg log warn error dev? time]]\n            [reagent.impl.batching :as batch]\n            [clojure.set :as s]))\n\n(declare ^:dynamic *ratom-context*)\n(defonce ^boolean debug false)\n(defonce ^:private generation 0)\n(defonce ^:private -running (clojure.core/atom 0))\n\n(defn ^boolean reactive? []\n  (some? *ratom-context*))\n\n\n;;; Utilities\n\n(defn running []\n  (+ @-running))\n\n(defn- ^number arr-len [x]\n  (if (nil? x) 0 (alength x)))\n\n(defn- ^boolean arr-eq [x y]\n  (let [len (arr-len x)]\n    (and (== len (arr-len y))\n         (loop [i 0]\n           (or (== i len)\n               (if (identical? (aget x i) (aget y i))\n                 (recur (inc i))\n                 false))))))\n\n(defn- in-context [obj f]\n  (binding [*ratom-context* obj]\n    (f)))\n\n(defn- deref-capture [f r]\n  (set! (.-captured r) nil)\n  (when (dev?)\n    (set! (.-ratomGeneration r) (set! generation (inc generation))))\n  (let [res (in-context r f)\n        c (.-captured r)]\n    (set! (.-dirty? r) false)\n    ;; Optimize common case where derefs occur in same order\n    (when-not (arr-eq c (.-watching r))\n      (._update-watching r c))\n    res))\n\n(defn- notify-deref-watcher! [derefed]\n  (when-some [r *ratom-context*]\n    (let [c (.-captured r)]\n      (if (nil? c)\n        (set! (.-captured r) (array derefed))\n        (.push c derefed)))))\n\n(defn- check-watches [old new]\n  (when debug\n    (swap! -running + (- (count new) (count old))))\n  new)\n\n(defn- add-w [this key f]\n  (let [w (.-watches this)]\n    (set! (.-watches this) (check-watches w (assoc w key f)))\n    (set! (.-watchesArr this) nil)))\n\n(defn- remove-w [this key]\n  (let [w (.-watches this)]\n    (set! (.-watches this) (check-watches w (dissoc w key)))\n    (set! (.-watchesArr this) nil)))\n\n(defn- notify-w [this old new]\n  (let [w (.-watchesArr this)\n        a (if (nil? w)\n            ;; Copy watches to array for speed\n            (->> (.-watches this)\n                 (reduce-kv #(doto %1 (.push %2) (.push %3)) #js[])\n                 (set! (.-watchesArr this)))\n            w)]\n    (let [len (alength a)]\n      (loop [i 0]\n        (when (< i len)\n          (let [k (aget a i)\n                f (aget a (inc i))]\n            (f k this old new))\n          (recur (+ 2 i)))))))\n\n(defn- pr-atom [a writer opts s]\n  (-write writer (str \"#<\" s \" \"))\n  (pr-writer (binding [*ratom-context* nil] (-deref a)) writer opts)\n  (-write writer \">\"))\n\n\n;;; Queueing\n\n(defonce ^:private rea-queue nil)\n\n(defn- rea-enqueue [r]\n  (when (nil? rea-queue)\n    (set! rea-queue (array))\n    (batch/schedule))\n  (.push rea-queue r))\n\n(defn flush! []\n  (loop []\n    (let [q rea-queue]\n      (when-not (nil? q)\n        (set! rea-queue nil)\n        (dotimes [i (alength q)]\n          (._queued-run (aget q i)))\n        (recur)))))\n\n(set! batch/ratom-flush flush!)\n\n\n;;; Atom\n\n(defprotocol IReactiveAtom)\n\n(deftype RAtom [^:mutable state meta validator ^:mutable watches]\n  IAtom\n  IReactiveAtom\n\n  IEquiv\n  (-equiv [o other] (identical? o other))\n\n  IDeref\n  (-deref [this]\n    (notify-deref-watcher! this)\n    state)\n\n  IReset\n  (-reset! [a new-value]\n    (when-not (nil? validator)\n      (assert (validator new-value) \"Validator rejected reference state\"))\n    (let [old-value state]\n      (set! state new-value)\n      (when-not (nil? watches)\n        (notify-w a old-value new-value))\n      new-value))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f state)))\n  (-swap! [a f x]        (-reset! a (f state x)))\n  (-swap! [a f x y]      (-reset! a (f state x y)))\n  (-swap! [a f x y more] (-reset! a (apply f state x y more)))\n\n  IWithMeta\n  (-with-meta [_ new-meta] (RAtom. state new-meta validator watches))\n\n  IMeta\n  (-meta [_] meta)\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Atom:\"))\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IHash\n  (-hash [this] (goog/getUid this)))\n\n(defn atom\n  \"Like clojure.core/atom, except that it keeps track of derefs.\"\n  ([x] (->RAtom x nil nil nil))\n  ([x & {:keys [meta validator]}] (->RAtom x meta validator nil)))\n\n\n;;; track\n\n(declare make-reaction)\n\n(def ^{:private true :const true} cache-key \"reagReactionCache\")\n\n(defn- cached-reaction [f o k obj destroy]\n  (let [m (aget o cache-key)\n        m (if (nil? m) {} m)\n        r (m k nil)]\n    (cond\n      (some? r) (-deref r)\n      (nil? *ratom-context*) (f)\n      :else (let [r (make-reaction\n                     f :on-dispose (fn [x]\n                                     (when debug (swap! -running dec))\n                                     (as-> (aget o cache-key) _\n                                       (dissoc _ k)\n                                       (aset o cache-key _))\n                                     (when (some? obj)\n                                       (set! (.-reaction obj) nil))\n                                     (when (some? destroy)\n                                       (destroy x))))\n                  v (-deref r)]\n              (aset o cache-key (assoc m k r))\n              (when debug (swap! -running inc))\n              (when (some? obj)\n                (set! (.-reaction obj) r))\n              v))))\n\n(deftype Track [f args ^:mutable reaction]\n  IReactiveAtom\n\n  IDeref\n  (-deref [this]\n    (if-some [r reaction]\n      (-deref r)\n      (cached-reaction #(apply f args) f args this nil)))\n\n  IEquiv\n  (-equiv [_ other]\n    (and (instance? Track other)\n         (= f (.-f other))\n         (= args (.-args other))))\n\n  IHash\n  (-hash [_] (hash [f args]))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Track:\")))\n\n(defn make-track [f args]\n  (Track. f args nil))\n\n(defn make-track! [f args]\n  (let [t (make-track f args)\n        r (make-reaction #(-deref t)\n                         :auto-run true)]\n    @r\n    r))\n\n(defn track [f & args]\n  {:pre [(ifn? f)]}\n  (make-track f args))\n\n(defn track! [f & args]\n  {:pre [(ifn? f)]}\n  (make-track! f args))\n\n;;; cursor\n\n(deftype RCursor [ratom path ^:mutable reaction\n                  ^:mutable state ^:mutable watches]\n  IAtom\n  IReactiveAtom\n\n  IEquiv\n  (-equiv [_ other]\n    (and (instance? RCursor other)\n         (= path (.-path other))\n         (= ratom (.-ratom other))))\n\n  Object\n  (_peek [this]\n    (binding [*ratom-context* nil]\n      (-deref this)))\n\n  (_set-state [this oldstate newstate]\n    (when-not (identical? oldstate newstate)\n      (set! state newstate)\n      (when (some? watches)\n        (notify-w this oldstate newstate))))\n\n  IDeref\n  (-deref [this]\n    (let [oldstate state\n          newstate (if-some [r reaction]\n                     (-deref r)\n                     (let [f (if (satisfies? IDeref ratom)\n                               #(get-in @ratom path)\n                               #(ratom path))]\n                       (cached-reaction f ratom path this nil)))]\n      (._set-state this oldstate newstate)\n      newstate))\n\n  IReset\n  (-reset! [this new-value]\n    (let [oldstate state]\n      (._set-state this oldstate new-value)\n      (if (satisfies? IDeref ratom)\n        (if (= path [])\n          (reset! ratom new-value)\n          (swap! ratom assoc-in path new-value))\n        (ratom path new-value))\n      new-value))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f (._peek a))))\n  (-swap! [a f x]        (-reset! a (f (._peek a) x)))\n  (-swap! [a f x y]      (-reset! a (f (._peek a) x y)))\n  (-swap! [a f x y more] (-reset! a (apply f (._peek a) x y more)))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts (str \"Cursor: \" path)))\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IHash\n  (-hash [_] (hash [ratom path])))\n\n(defn cursor\n  [src path]\n  (assert (or (satisfies? IReactiveAtom src)\n              (and (ifn? src)\n                   (not (vector? src))))\n          (str \"src must be a reactive atom or a function, not \"\n               (pr-str src)))\n  (->RCursor src path nil nil nil))\n\n\n;;; with-let support\n\n(defn with-let-destroy [v]\n  (when-some [f (.-destroy v)]\n    (f)))\n\n(defn with-let-values [key]\n  (if-some [c *ratom-context*]\n    (cached-reaction array c key\n                     nil with-let-destroy)\n    (array)))\n\n\n;;;; reaction\n\n(defprotocol IDisposable\n  (dispose! [this])\n  (add-on-dispose! [this f]))\n\n(defprotocol IRunnable\n  (run [this]))\n\n(defn- handle-reaction-change [this sender old new]\n  (._handle-change this sender old new))\n\n\n(deftype Reaction [f ^:mutable state ^:mutable ^boolean dirty? ^boolean nocache?\n                   ^:mutable watching ^:mutable watches ^:mutable auto-run\n                   ^:mutable caught]\n  IAtom\n  IReactiveAtom\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]\n    (let [was-empty (empty? watches)]\n      (remove-w this key)\n      (when (and (not was-empty)\n                 (empty? watches)\n                 (nil? auto-run))\n        (dispose! this))))\n\n  IReset\n  (-reset! [a newval]\n    (assert (fn? (.-on-set a)) \"Reaction is read only; on-set is not allowed\")\n    (let [oldval state]\n      (set! state newval)\n      (.on-set a oldval newval)\n      (notify-w a oldval newval)\n      newval))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f (._peek-at a))))\n  (-swap! [a f x]        (-reset! a (f (._peek-at a) x)))\n  (-swap! [a f x y]      (-reset! a (f (._peek-at a) x y)))\n  (-swap! [a f x y more] (-reset! a (apply f (._peek-at a) x y more)))\n\n  Object\n  (_peek-at [this]\n    (binding [*ratom-context* nil]\n      (-deref this)))\n\n  (_handle-change [this sender oldval newval]\n    (when-not (or (identical? oldval newval)\n                  dirty?)\n      (if (nil? auto-run)\n        (do\n          (set! dirty? true)\n          (rea-enqueue this))\n        (if (true? auto-run)\n          (._run this false)\n          (auto-run this)))))\n\n  (_update-watching [this derefed]\n    (let [new (set derefed)\n          old (set watching)]\n      (set! watching derefed)\n      (doseq [w (s/difference new old)]\n        (-add-watch w this handle-reaction-change))\n      (doseq [w (s/difference old new)]\n        (-remove-watch w this))))\n\n  (_queued-run [this]\n    (when (and dirty? (some? watching))\n      (._run this true)))\n\n  (_try-capture [this f]\n    (try\n      (set! caught nil)\n      (deref-capture f this)\n      (catch :default e\n        (set! state e)\n        (set! caught e)\n        (set! dirty? false))))\n\n  (_run [this check]\n    (let [oldstate state\n          res (if check\n                (._try-capture this f)\n                (deref-capture f this))]\n      (when-not nocache?\n        (set! state res)\n        ;; Use = to determine equality from reactions, since\n        ;; they are likely to produce new data structures.\n        (when-not (or (nil? watches)\n                      (= oldstate res))\n          (notify-w this oldstate res)))\n      res))\n\n  (_set-opts [this {:keys [auto-run on-set on-dispose no-cache]}]\n    (when (some? auto-run)\n      (set! (.-auto-run this) auto-run))\n    (when (some? on-set)\n      (set! (.-on-set this) on-set))\n    (when (some? on-dispose)\n      (set! (.-on-dispose this) on-dispose))\n    (when (some? no-cache)\n      (set! (.-nocache? this) no-cache)))\n\n  IRunnable\n  (run [this]\n    (flush!)\n    (._run this false))\n\n  IDeref\n  (-deref [this]\n    (when-some [e caught]\n      (throw e))\n    (let [non-reactive (nil? *ratom-context*)]\n      (when non-reactive\n        (flush!))\n      (if (and non-reactive (nil? auto-run))\n        (when dirty?\n          (let [oldstate state]\n            (set! state (f))\n            (when-not (or (nil? watches) (= oldstate state))\n              (notify-w this oldstate state))))\n        (do\n          (notify-deref-watcher! this)\n          (when dirty?\n            (._run this false)))))\n    state)\n\n  IDisposable\n  (dispose! [this]\n    (let [s state\n          wg watching]\n      (set! watching nil)\n      (set! state nil)\n      (set! auto-run nil)\n      (set! dirty? true)\n      (doseq [w (set wg)]\n        (-remove-watch w this))\n      (when (some? (.-on-dispose this))\n        (.on-dispose this s))\n      (when-some [a (.-on-dispose-arr this)]\n        (dotimes [i (alength a)]\n          ((aget a i) this)))))\n\n  (add-on-dispose! [this f]\n    ;; f is called with the reaction as argument when it is no longer active\n    (if-some [a (.-on-dispose-arr this)]\n      (.push a f)\n      (set! (.-on-dispose-arr this) (array f))))\n\n  IEquiv\n  (-equiv [o other] (identical? o other))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts (str \"Reaction \" (hash a) \":\")))\n\n  IHash\n  (-hash [this] (goog/getUid this)))\n\n\n(defn make-reaction [f & {:keys [auto-run on-set on-dispose]}]\n  (let [reaction (->Reaction f nil true false nil nil nil nil)]\n    (._set-opts reaction {:auto-run auto-run\n                          :on-set on-set\n                          :on-dispose on-dispose})\n    reaction))\n\n\n\n(def ^:private temp-reaction (make-reaction nil))\n\n(defn run-in-reaction [f obj key run opts]\n  (let [r temp-reaction\n        res (deref-capture f r)]\n    (when-not (nil? (.-watching r))\n      (set! temp-reaction (make-reaction nil))\n      (._set-opts r opts)\n      (set! (.-f r) f)\n      (set! (.-auto-run r) #(run obj))\n      (aset obj key r))\n    res))\n\n(defn check-derefs [f]\n  (let [ctx (js-obj)\n        res (in-context ctx f)]\n    [res (some? (.-captured ctx))]))\n\n\n;;; wrap\n\n(deftype Wrapper [^:mutable state callback ^:mutable ^boolean changed\n                  ^:mutable watches]\n\n  IAtom\n\n  IDeref\n  (-deref [this]\n    (when (dev?)\n      (when (and changed (some? *ratom-context*))\n        (warn \"derefing stale wrap: \"\n              (pr-str this))))\n    state)\n\n  IReset\n  (-reset! [this newval]\n    (let [oldval state]\n      (set! changed true)\n      (set! state newval)\n      (when (some? watches)\n        (notify-w this oldval newval))\n      (callback newval)\n      newval))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f state)))\n  (-swap! [a f x]        (-reset! a (f state x)))\n  (-swap! [a f x y]      (-reset! a (f state x y)))\n  (-swap! [a f x y more] (-reset! a (apply f state x y more)))\n\n  IEquiv\n  (-equiv [_ other]\n          (and (instance? Wrapper other)\n               ;; If either of the wrappers have changed, equality\n               ;; cannot be relied on.\n               (not changed)\n               (not (.-changed other))\n               (= state (.-state other))\n               (= callback (.-callback other))))\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Wrap:\")))\n\n(defn make-wrapper [value callback-fn args]\n  (->Wrapper value\n             (util/make-partial-fn callback-fn args)\n             false nil))\n\n\n\n\n#_(do\n  (defn ratom-perf []\n    (set! debug false)\n    (dotimes [_ 10]\n      (let [nite 100000\n            a (atom 0)\n            f (fn []\n                (quot @a 10))\n            mid (make-reaction f)\n            res (track! (fn []\n                          ;; (with-let [x 1])\n                          ;; @(track f)\n                          (inc @mid)\n                          ))]\n        @res\n        (time (dotimes [x nite]\n                (swap! a inc)\n                (flush!)))\n        (dispose! res))))\n  (ratom-perf))\n"]}