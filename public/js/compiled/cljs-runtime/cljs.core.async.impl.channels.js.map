{"version":3,"sources":["cljs/core/async/impl/channels.cljs"],"mappings":"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","names":["cljs.core.async.impl.channels/box","val","js/cljs","js/cljs.core","js/cljs.core.async","js/cljs.core.async.impl","js/cljs.core.async.impl.channels","js/cljs.core.async.impl.channels.t_cljs$core$async$impl$channels33599","cljs.core.async.impl.channels/t_cljs$core$async$impl$channels33599","_33601","meta33600","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","cljs.core.async.impl.channels/->t_cljs$core$async$impl$channels33599","_","cljs.core.async.impl.channels/PutBox","cljs.core.async.impl.channels/->PutBox","handler","cljs.core.async.impl.channels/put-active?","box","cljs.core.async.impl.protocols/active?","cljs.core.async.impl.channels/MAX_DIRTY","x__4487__auto__","m__4488__auto__","cljs.core.async.impl.channels/abort","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","cljs.core.async.impl.channels/MMC","this","cljs.core/PROTOCOL_SENTINEL","cljs.core.async.impl.channels/ManyToManyChannel","cljs.core.async.impl.channels/->ManyToManyChannel","takes","dirty-takes","puts","dirty-puts","buf","closed","add!","putter","put-handler","put-cb","cljs.core.async.impl.protocols/commit","cljs.core.async.impl.dispatch/run","cljs.core/constantly","cljs.core.async.impl.protocols/close!","js/Error","and__4174__auto__","cljs.core/not","cljs.core.async.impl.protocols/full?","done?","cljs.core/reduced?","take-cbs","takers","cljs.core/count","taker","ret","cljs.core.async.impl.protocols/remove!","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/seq","seq__33615","chunk__33616","count__33617","i__33618","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","f","take-cb","cljs.core.async.impl.protocols/blockable?","cljs.core.async.impl.protocols/MAX-QUEUE-SIZE","temp__5733__auto__","vec__33625","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cbs","cb","seq__33629","chunk__33630","count__33631","i__33632","has-val","cljs.core.async.impl.protocols/close-buf!","cljs.core.async.impl.channels/ex-handler","ex","js/console","cljs.core.async.impl.channels/handle","exh","t","else","fexpr__33650","or__4185__auto__","cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2","var_args","G__33655","cljs.core.async.impl.channels/chan","cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2","xform","cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3","cljs.core.async.impl.buffers/ring-buffer","cljs.core.async.impl.protocols/add!","e33656","e33657"],"sourcesContent":[";;   Copyright (c) Rich Hickey and contributors. All rights reserved.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.core.async.impl.channels\n  (:require [cljs.core.async.impl.protocols :as impl]\n            [cljs.core.async.impl.dispatch :as dispatch]\n            [cljs.core.async.impl.buffers :as buffers]))\n\n\n\n(defn box [val]\n  (reify cljs.core/IDeref\n    (-deref [_] val)))\n\n(deftype PutBox [handler val])\n\n(defn put-active? [box]\n  (impl/active? (.-handler box)))\n\n(def ^:const MAX_DIRTY 64)\n\n(defprotocol MMC\n  (abort [this]))\n\n(deftype ManyToManyChannel [takes ^:mutable dirty-takes puts ^:mutable dirty-puts ^not-native buf ^:mutable closed add!]\n  MMC\n  (abort [this]\n    (loop []\n      (let [putter (.pop puts)]\n        (when-not (nil? putter)\n          (let [^not-native put-handler (.-handler putter)\n                val (.-val putter)]\n            (if ^boolean (impl/active? put-handler)\n              (let [put-cb (impl/commit put-handler)]\n                (dispatch/run #(put-cb true)))\n              (recur))))))\n    (.cleanup puts (constantly false))\n    (impl/close! this))\n  impl/WritePort\n  (put! [this val ^not-native handler]\n    (assert (not (nil? val)) \"Can't put nil on a channel\")\n    ;; bug in CLJS compiler boolean inference - David\n    (let [^boolean closed closed]\n      (if (or closed (not ^boolean (impl/active? handler)))\n        (box (not closed))\n        (if (and buf (not (impl/full? buf)))\n          (do\n            (impl/commit handler)\n            (let [done? (reduced? (add! buf val))\n                  take-cbs (loop [takers []]\n                             (if (and (pos? (.-length takes)) (pos? (count buf)))\n                               (let [^not-native taker (.pop takes)]\n                                 (if ^boolean (impl/active? taker)\n                                   (let [ret (impl/commit taker)\n                                         val (impl/remove! buf)]\n                                     (recur (conj takers (fn [] (ret val)))))\n                                   (recur takers)))\n                               takers))]\n              (when done? (abort this))\n              (when (seq take-cbs)\n                (doseq [f take-cbs]\n                  (dispatch/run f)))\n              (box true)))\n          (let [taker (loop []\n                        (let [^not-native taker (.pop takes)]\n                          (when taker\n                            (if (impl/active? taker)\n                              taker\n                              (recur)))))]\n            (if taker\n              (let [take-cb (impl/commit taker)]\n                (impl/commit handler)\n                (dispatch/run (fn [] (take-cb val)))\n                (box true))\n              (do\n                (if (> dirty-puts MAX_DIRTY)\n                  (do (set! dirty-puts 0)\n                      (.cleanup puts put-active?))\n                  (set! dirty-puts (inc dirty-puts)))\n                (when (impl/blockable? handler)\n                  (assert (< (.-length puts) impl/MAX-QUEUE-SIZE)\n                    (str \"No more than \" impl/MAX-QUEUE-SIZE\n                         \" pending puts are allowed on a single channel.\"\n                         \" Consider using a windowed buffer.\"))\n                  (.unbounded-unshift puts (PutBox. handler val)))\n                nil)))))))\n  impl/ReadPort\n  (take! [this ^not-native handler]\n    (if (not ^boolean (impl/active? handler))\n      nil\n      (if (and (not (nil? buf)) (pos? (count buf)))\n        (do\n          (if-let [take-cb (impl/commit handler)]\n            (let [val (impl/remove! buf)\n                  [done? cbs] (when (pos? (.-length puts))\n                                (loop [cbs []]\n                                  (let [putter (.pop puts)\n                                        ^not-native put-handler (.-handler putter)\n                                        val (.-val putter)\n                                        cb (and ^boolean (impl/active? put-handler) (impl/commit put-handler))\n                                        cbs (if cb (conj cbs cb) cbs)\n                                        done? (when cb (reduced? (add! buf val)))]\n                                    (if (and (not done?) (not (impl/full? buf)) (pos? (.-length puts)))\n                                      (recur cbs)\n                                      [done? cbs]))))]\n              (when done?\n                (abort this))\n              (doseq [cb cbs]\n                (dispatch/run #(cb true)))\n              (box val))))\n        (let [putter (loop []\n                       (let [putter (.pop puts)]\n                         (when putter\n                           (if ^boolean (impl/active? (.-handler putter))\n                             putter\n                             (recur)))))]\n          (if putter\n            (let [put-cb (impl/commit (.-handler putter))]\n              (impl/commit handler)\n              (dispatch/run #(put-cb true))\n              (box (.-val putter)))\n            (if closed\n              (do\n                (when buf (add! buf))\n                (if (and (impl/active? handler) (impl/commit handler))\n                  (let [has-val (and buf (pos? (count buf)))]\n                    (let [val (when has-val (impl/remove! buf))]\n                      (box val)))\n                  nil))\n              (do\n                (if (> dirty-takes MAX_DIRTY)\n                  (do (set! dirty-takes 0)\n                      (.cleanup takes impl/active?))\n                  (set! dirty-takes (inc dirty-takes)))\n                (when (impl/blockable? handler)\n                  (assert (< (.-length takes) impl/MAX-QUEUE-SIZE)\n                    (str \"No more than \" impl/MAX-QUEUE-SIZE\n                         \" pending takes are allowed on a single channel.\"))\n                  (.unbounded-unshift takes handler))\n                nil)))))))\n  impl/Channel\n  (closed? [_] closed)\n  (close! [this]\n    (if ^boolean closed\n        nil\n        (do (set! closed true)\n            (when (and buf (zero? (.-length puts)))\n                    (add! buf))\n            (loop []\n              (let [^not-native taker (.pop takes)]\n                (when-not (nil? taker)\n                  (when ^boolean (impl/active? taker)\n                    (let [take-cb (impl/commit taker)\n                          val (when (and buf (pos? (count buf))) (impl/remove! buf))]\n                      (dispatch/run (fn [] (take-cb val)))))\n                  (recur))))\n            (when buf (impl/close-buf! buf))\n            nil))))\n\n(defn- ex-handler [ex]\n  (.log js/console ex)\n  nil)\n\n(defn- handle [buf exh t]\n  (let [else ((or exh ex-handler) t)]\n    (if (nil? else)\n      buf\n      (impl/add! buf else))))\n\n(defn chan\n  ([buf] (chan buf nil))\n  ([buf xform] (chan buf xform nil))\n  ([buf xform exh]\n     (ManyToManyChannel. (buffers/ring-buffer 32) 0 (buffers/ring-buffer 32)\n                         0 buf false\n                         (let [add! (if xform (xform impl/add!) impl/add!)]\n                           (fn\n                             ([buf]\n                              (try\n                                (add! buf)\n                                (catch :default t\n                                  (handle buf exh t))))\n                             ([buf val]\n                              (try\n                                (add! buf val)\n                                (catch :default t\n                                  (handle buf exh t)))))))))\n"]}