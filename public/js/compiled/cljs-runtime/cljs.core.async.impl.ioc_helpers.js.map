{"version":3,"sources":["cljs/core/async/impl/ioc_helpers.cljs"],"mappings":"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","names":["cljs.core.async.impl.ioc-helpers/FN-IDX","cljs.core.async.impl.ioc-helpers/STATE-IDX","cljs.core.async.impl.ioc-helpers/VALUE-IDX","cljs.core.async.impl.ioc-helpers/BINDINGS-IDX","cljs.core.async.impl.ioc-helpers/EXCEPTION-FRAMES","cljs.core.async.impl.ioc-helpers/CURRENT-EXCEPTION","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/aset-object","arr","idx","o","cljs.core.async.impl.ioc-helpers/aget-object","cljs.core.async.impl.ioc-helpers/finished?","state-array","cljs.core/keyword-identical?","cljs.core.async.impl.ioc-helpers/fn-handler","f","js/cljs","js/cljs.core","js/cljs.core.async","js/cljs.core.async.impl","js/cljs.core.async.impl.ioc-helpers","js/cljs.core.async.impl.ioc-helpers.t_cljs$core$async$impl$ioc_helpers33602","cljs.core.async.impl.ioc-helpers/t_cljs$core$async$impl$ioc_helpers33602","_33604","meta33603","cljs.core/PROTOCOL_SENTINEL","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","cljs.core.async.impl.ioc-helpers/->t_cljs$core$async$impl$ioc_helpers33602","_","cljs.core.async.impl.ioc-helpers/run-state-machine","state","fexpr__33605","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","e33606","js/Object","ex","cljs.core.async.impl.protocols/close!","cljs.core.async.impl.ioc-helpers/take!","blk","c","temp__5733__auto__","cb","cljs.core.async.impl.protocols/take!","x","statearr-33607","statearr-33608","cljs.core/deref","cljs.core.async.impl.ioc-helpers/put!","val","cljs.core.async.impl.protocols/put!","ret-val","statearr-33609","statearr-33610","cljs.core.async.impl.ioc-helpers/return-chan","value","this__4439__auto__","k__4440__auto__","cljs.core._lookup.cljs$core$IFn$_invoke$arity$3","this__4441__auto__","k33612","else__4442__auto__","G__33620","cljs.core/Keyword","catch-block","catch-exception","finally-block","continue-block","prev","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4461__auto__","p__33621","vec__33622","k__4462__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__33611","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","cljs.core/count","this__4435__auto__","h__4297__auto__","fexpr__33628","coll__4436__auto__","cljs.core/hash-unordered-coll","this33613","other33614","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__33633","expr__33634","G__33636","G__33637","G__33638","G__33639","G__33640","G__33641","G__33642","G__33643","G__33644","G__33645","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4451__auto__","cljs.core/seq","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core/-assoc","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","cljs.core.async.impl.ioc-helpers/ExceptionFrame","this__4482__auto__","cljs.core/List","writer__4483__auto__","G__33619","extmap__4478__auto__","G__33646","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","cljs.core.async.impl.ioc-helpers/->ExceptionFrame","cljs.core.async.impl.ioc-helpers/map->ExceptionFrame","cljs.core.async.impl.ioc-helpers/add-exception-frame","statearr-33647","cljs.core.async.impl.ioc-helpers/process-exception","exception-frame","exception","and__4174__auto__","cljs.core/not","statearr-33648","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","statearr-33649","statearr-33651","statearr-33652","statearr-33653","js/Error"],"sourcesContent":["(ns cljs.core.async.impl.ioc-helpers\n  (:require [cljs.core.async.impl.protocols :as impl])\n  (:require-macros [cljs.core.async.impl.ioc-macros :as ioc]))\n\n(def ^:const FN-IDX 0)\n(def ^:const STATE-IDX 1)\n(def ^:const VALUE-IDX 2)\n(def ^:const BINDINGS-IDX 3)\n(def ^:const EXCEPTION-FRAMES 4)\n(def ^:const CURRENT-EXCEPTION 5)\n(def ^:const USER-START-IDX 6)\n\n(defn aset-object [arr idx o]\n  (aget arr idx o))\n\n(defn aget-object [arr idx]\n  (aget arr idx))\n\n\n(defn finished?\n  \"Returns true if the machine is in a finished state\"\n  [state-array]\n  (keyword-identical? (aget state-array STATE-IDX) :finished))\n\n(defn- fn-handler\n  [f]\n  (reify\n   impl/Handler\n   (active? [_] true)\n   (blockable? [_] true)\n   (commit [_] f)))\n\n\n(defn run-state-machine [state]\n  ((aget-object state FN-IDX) state))\n\n(defn run-state-machine-wrapped [state]\n  (try\n    (run-state-machine state)\n    (catch js/Object ex\n      (impl/close! ^not-native (aget-object state USER-START-IDX))\n      (throw ex))))\n\n(defn take! [state blk ^not-native c]\n  (if-let [cb (impl/take! c (fn-handler\n                                   (fn [x]\n                                     (ioc/aset-all! state VALUE-IDX x STATE-IDX blk)\n                                     (run-state-machine-wrapped state))))]\n    (do (ioc/aset-all! state VALUE-IDX @cb STATE-IDX blk)\n        :recur)\n    nil))\n\n(defn put! [state blk ^not-native c val]\n  (if-let [cb (impl/put! c val (fn-handler (fn [ret-val]\n                                             (ioc/aset-all! state VALUE-IDX ret-val STATE-IDX blk)\n                                             (run-state-machine-wrapped state))))]\n    (do (ioc/aset-all! state VALUE-IDX @cb STATE-IDX blk)\n        :recur)\n    nil))\n\n(defn return-chan [state value]\n  (let [^not-native c (aget state USER-START-IDX)]\n           (when-not (nil? value)\n             (impl/put! c value (fn-handler (fn [] nil))))\n           (impl/close! c)\n           c))\n\n(defrecord ExceptionFrame [catch-block\n                           ^Class catch-exception\n                           finally-block\n                           continue-block\n                           prev])\n\n(defn add-exception-frame [state catch-block catch-exception finally-block continue-block]\n  (ioc/aset-all! state\n                 EXCEPTION-FRAMES\n                 (->ExceptionFrame catch-block\n                                   catch-exception\n                                   finally-block\n                                   continue-block\n                                   (aget-object state EXCEPTION-FRAMES))))\n\n(defn process-exception [state]\n  (let [exception-frame (aget-object state EXCEPTION-FRAMES)\n        catch-block (:catch-block exception-frame)\n        catch-exception (:catch-exception exception-frame)\n        exception (aget-object state CURRENT-EXCEPTION)]\n    (cond\n     (and exception\n          (not exception-frame))\n     (throw exception)\n\n     (and exception\n          catch-block\n          (or (= :default catch-exception)\n              (instance? catch-exception exception)))\n     (ioc/aset-all! state\n                    STATE-IDX\n                    catch-block\n                    VALUE-IDX\n                    exception\n                    CURRENT-EXCEPTION\n                    nil\n                    EXCEPTION-FRAMES\n                    (assoc exception-frame\n                      :catch-block nil\n                      :catch-exception nil))\n\n\n     (and exception\n          (not catch-block)\n          (not (:finally-block exception-frame)))\n\n     (do (ioc/aset-all! state\n                        EXCEPTION-FRAMES\n                        (:prev exception-frame))\n         (recur state))\n\n     (and exception\n          (not catch-block)\n          (:finally-block exception-frame))\n     (ioc/aset-all! state\n                    STATE-IDX\n                    (:finally-block exception-frame)\n                    EXCEPTION-FRAMES\n                    (assoc exception-frame\n                      :finally-block nil))\n\n     (and (not exception)\n          (:finally-block exception-frame))\n     (do (ioc/aset-all! state\n                        STATE-IDX\n                        (:finally-block exception-frame)\n                        EXCEPTION-FRAMES\n                        (assoc exception-frame\n                          :finally-block nil)))\n\n     (and (not exception)\n          (not (:finally-block exception-frame)))\n     (do (ioc/aset-all! state\n                   STATE-IDX\n                   (:continue-block exception-frame)\n                   EXCEPTION-FRAMES\n                   (:prev exception-frame)))\n\n     :else (throw (js/Error. \"No matching clause\")))))\n"]}